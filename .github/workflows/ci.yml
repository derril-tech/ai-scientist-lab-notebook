name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend & API checks
  node-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, api]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Typecheck
      run: npm run typecheck --workspace=${{ matrix.workspace }}
    
    - name: Lint
      run: npm run lint --workspace=${{ matrix.workspace }}
    
    - name: Run tests
      run: npm run test --workspace=${{ matrix.workspace }}
    
    - name: Build
      run: npm run build --workspace=${{ matrix.workspace }}

  # Python workers checks
  python-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd workers
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd workers
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        cd workers
        mypy . --ignore-missing-imports
    
    - name: Run tests
      run: |
        cd workers
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./workers/coverage.xml

  # Docker builds
  docker-build:
    runs-on: ubuntu-latest
    needs: [node-checks, python-checks]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: false
        tags: ai-scientist-lab-notebook/api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: ai-scientist-lab-notebook/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Workers image
      uses: docker/build-push-action@v5
      with:
        context: ./workers
        push: false
        tags: ai-scientist-lab-notebook/workers:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # TODO: Add actual deployment steps
        # - Terraform apply for staging
        # - Docker image pushes to registry
        # - Kubernetes deployments
